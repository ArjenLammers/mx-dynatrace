"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynatraceClassWrapper = exports.DynatraceFnWrapper = void 0;
const React = require("react");
const Dynatrace_1 = require("../instrumentor/base/Dynatrace");
const Configuration_1 = require("../instrumentor/base/configuration/Configuration");
const DynatraceFnWrapper = (props) => {
    const action = Dynatrace_1.Dynatrace.enterAction('Render ' + getNameFromComponent(props));
    React.useEffect(() => {
        action.leaveAction();
    });
    return props.children;
};
exports.DynatraceFnWrapper = DynatraceFnWrapper;
class DynatraceClassWrapper extends React.Component {
    constructor(props) {
        super(props);
        this.wrappingName = getNameFromComponent(props);
        this.componentMounted = false;
    }
    render() {
        if ((this.componentMounted && Configuration_1.Configuration.isLifecycleUpdateEnabled()) ||
            !this.componentMounted) {
            const actionPrefix = !this.componentMounted ? 'Render ' : 'Update ';
            this.internalAction = Dynatrace_1.Dynatrace.enterAction(actionPrefix + this.wrappingName);
        }
        return this.props.children;
    }
    componentWillUnmount() {
        this.componentMounted = false;
    }
    componentDidUpdate() {
        this.reportFunctionEvent('componentDidUpdate()');
    }
    componentDidMount() {
        this.componentMounted = true;
        this.reportFunctionEvent('componentDidMount()');
    }
    reportFunctionEvent(event) {
        if (this.internalAction !== undefined) {
            this.internalAction.reportEvent(`${this.wrappingName}.${event}`);
            this.internalAction.leaveAction();
            this.internalAction = undefined;
        }
    }
}
exports.DynatraceClassWrapper = DynatraceClassWrapper;
const getNameFromComponent = (props) => {
    if (props !== undefined && props.children !== undefined
        && props.children.type !== undefined) {
        if (props.children.props !== undefined &&
            props.children.props.dtActionName !== undefined) {
            return props.children.props.dtActionName;
        }
        else if (props.children.type.displayName !== undefined) {
            return props.children.type.displayName;
        }
        else if (props.children.type._dtInfo !== undefined) {
            return props.children.type._dtInfo.name;
        }
        else {
            return props.children.type.name;
        }
    }
    else {
        return 'Undefined Name';
    }
};
