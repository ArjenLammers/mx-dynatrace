"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynatraceAction = void 0;
const StringUtils_1 = require("./util/StringUtils");
const DynatraceBridge_1 = require("./DynatraceBridge");
const Logger_1 = require("./Logger");
class DynatraceAction {
    constructor(key, name) {
        this.key = key;
        this.name = name;
    }
    reportError(errorName, errorCode, platform) {
        if (!StringUtils_1.StringUtils.isStringNullEmptyOrUndefined(errorName)) {
            DynatraceBridge_1.DynatraceNative.reportErrorInAction(this.key, errorName, errorCode, platform);
            Logger_1.Logger.logDebug(`Report Error ${errorName} of ${errorCode} in Action - ${this.name}`);
        }
        else {
            Logger_1.Logger.logDebug(`Report Error not working because of invalid errorName: ${errorName}`);
        }
    }
    reportEvent(eventName, platform) {
        if (!StringUtils_1.StringUtils.isStringNullEmptyOrUndefined(eventName)) {
            DynatraceBridge_1.DynatraceNative.reportEventInAction(this.key, eventName, platform);
            Logger_1.Logger.logDebug(`Report Event ${eventName} in Action - ${this.name}`);
        }
        else {
            Logger_1.Logger.logDebug(`Report Event not working because of invalid eventName: ${eventName}`);
        }
    }
    reportStringValue(valueName, value, platform) {
        if (!StringUtils_1.StringUtils.isStringNullEmptyOrUndefined(valueName)) {
            DynatraceBridge_1.DynatraceNative.reportStringValueInAction(this.key, valueName, value, platform);
            Logger_1.Logger.logDebug(`Report Value ${valueName} of ${value} in Action - ${this.name}`);
        }
        else {
            Logger_1.Logger.logDebug(`Report Value not working because of invalid valueName: ${valueName}`);
        }
    }
    reportIntValue(valueName, value, platform) {
        if (!StringUtils_1.StringUtils.isStringNullEmptyOrUndefined(valueName)) {
            DynatraceBridge_1.DynatraceNative.reportIntValueInAction(this.key, valueName, value, platform);
            Logger_1.Logger.logDebug(`Report Value ${valueName} of ${value} in Action - ${this.name}`);
        }
        else {
            Logger_1.Logger.logDebug(`Report Value not working because of invalid valueName: ${valueName}`);
        }
    }
    reportDoubleValue(valueName, value, platform) {
        if (!StringUtils_1.StringUtils.isStringNullEmptyOrUndefined(valueName)) {
            DynatraceBridge_1.DynatraceNative.reportDoubleValueInAction(this.key, valueName, value, platform);
            Logger_1.Logger.logDebug(`Report Value ${valueName} of ${value} in Action - ${this.name}`);
        }
        else {
            Logger_1.Logger.logDebug(`Report Value not working because of invalid valueName: ${valueName}`);
        }
    }
    leaveAction(platform) {
        DynatraceBridge_1.DynatraceNative.leaveAction(this.key, platform);
        Logger_1.Logger.logDebug(`Leave Action - ${this.name}`);
    }
    cancel(platform) {
        DynatraceBridge_1.DynatraceNative.cancelAction(this.key, platform);
        Logger_1.Logger.logDebug(`Cancel Action - ${this.name}`);
    }
}
exports.DynatraceAction = DynatraceAction;
